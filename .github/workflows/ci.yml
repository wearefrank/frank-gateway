name: pr ci

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  pull_request:
    branches: [ master ]

env:
  DOCKERFILE: ./Dockerfile
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  IMAGE: ghcr.io/wearefrank/frank-gateway
jobs:
  # version-next:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #   outputs:
  #     version-next: ${{ steps.reference.outputs.next-reference }}
  #     version-next-strict: ${{ steps.reference.outputs.next-reference }}
  #   steps:
  #     - uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
  #       with:
  #         disable-sudo: true
  #         egress-policy: block
  #         allowed-endpoints: >
  #           github.com:443

  #     - name: Checkout
  #       uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 #4.1.7

  #     - name: Next Reference
  #       id: reference
  #       uses: wearefrank/ci-cd-templates/next-reference@5ec30763e8d8eeed008edcac3c6a329367e42760 #1.0.4
 
  discover-plugin-tests:
    runs-on: ubuntu-latest
    outputs:
      plugin-matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Find all subdirectories in tests/
        id: set-matrix
        run: |
          echo "🔍 Discovering test directories in ./tests/"
          plugins=$(find tests -mindepth 1 -maxdepth 1 -type d -printf '"%f",' | sed 's/,$//')
          echo "matrix=[${plugins}]"
          echo "matrix=[${plugins}]" >> $GITHUB_OUTPUT

          
  build-image:
    runs-on: ubuntu-latest
    outputs: 
      image-id: ${{ steps.build-and-push.outputs.imageid }}
  #  needs: version-next

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 #5.5.1
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=ref,event=branch
            type=raw,value=${{ github.run_number }}          
          #   type=semver,pattern={{version}},value=${{ needs.version-next.outputs.version-next }}
          #   type=semver,pattern={{major}}.{{minor}},value=${{ needs.version-next.outputs.version-next }}
          #   type=semver,pattern={{major}},value=${{ needs.version-next.outputs.version-next }}
          #   type=ref,event=pr
          #   type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
          # flavor: |
          #   latest=false

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker images
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          platforms: linux/amd64
          outputs: type=docker,dest=image.tar
          push: false
          file: ${{ env.DOCKERFILE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: "Upload Docker tar"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #4.6.2
        with:
          name: build-docker-image
          path: ./image.tar
          retention-days: 1

  test-plugins:
    uses: wearefrank/ci-cd-templates/.github/workflows/soapui-testrunner.yml@e89e41bafa1b61a03984af9a3c9fe0ab87943c1f
    needs: [ build-image, discover-plugin-tests]
    strategy:
      fail-fast: false
      matrix:
        plugin-test-dir: ${{ fromJson(needs.discover-plugin-tests.outputs.plugin-matrix) }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
    with:
      image-build-artifact-name: 'build-docker-image'
      image-tarball-file: 'image.tar'
      # reports-artifact-name: 'soapui_report_${{ matrix.plugin-test-dir }}'
      soapui-project: tests/${{ matrix.plugin-test-dir }}/soapui-project.xml
      image-id: ${{ needs.build-image.outputs.image-id }}
      image-name: ${{ github.repository }}
      setup-script: |
        docker compose -f tests/${{ matrix.plugin-test-dir }}/docker-compose.yaml up -d
      teardown-script: |
        docker compose -f tests/${{ matrix.plugin-test-dir }}/docker-compose.yaml down -v